#!/bin/bash

#create main.csv if it doesn't exist
touch main.csv

#default behavior: insert new record into csv
echo "$1,$2,$3,$4" >> main.csv

#handle command line flags
while getopts "c:n:s:h" opt; do
  case $opt in
    c)
      #print total amount spent in category
      grep -E -o ",$OPTARG,[0-9]+" main.csv | awk -F, '{sum+=$3} END {print sum}'
      ;;
    n)
      #print total amount spent by name
      grep -E ",$OPTARG" main.csv | awk -F, '{sum+=$3} END {print sum}'
      ;;
    s)
      #sort csv by column
      sort -t, -k$OPTARG main.csv
      ;;
    h)
      #print help
      
      
      
      
#!/bin/bash

# Name of the script: Assgn1_8_<groupno>.sh

# Check if main.csv exists, if not create it
if [ ! -f main.csv ]; then
  echo "Date,Category,Amount,Name" > main.csv
fi

# Helper function to insert a new record into main.csv
insert_record() {
  echo "$1,$2,$3,$4" >> main.csv
  echo "Inserted $1,$2,$3,$4 in main.csv"
}

# Helper function to calculate total amount spent for a category
calculate_category_total() {
  category_total=$(awk -F, -v category="$1" '$2 == category { sum += $3 } END { print sum }' main.csv)
  echo "Total amount spent on $1: $category_total"
}

# Helper function to calculate total amount spent by a person
calculate_name_total() {
  name_total=$(awk -F, -v name="$1" '$4 == name { sum += $3 } END { print sum }' main.csv)
  echo "Total amount spent by $1: $name_total"
}

# Helper function to sort the csv by column
sort_csv() {
  sort -t, -k$1 main.csv -o main.csv
  echo "main.csv sorted by $1 column"
}

# Helper function to show help prompt
show_help() {
  echo "Utility Name: Expense Tracker"
  echo "Usage: sh Assgn1_8_<groupno>.sh [-c category] [-n name] [-s column] record [record...]"
  echo "Description: This script is used to track expenses. It accepts records in the form of 'dd-mm-yy category amount name' and inserts them into main.csv. It also accepts flags '-c' to show total amount spent on a category, '-n' to show total amount spent by a name, and '-s' to sort the csv by a column. By default, the csv is sorted by the 'Date' column."
}

# Check if any flags are passed in
while getopts ":c:n:s:h" opt; do
  case $opt in
    c)
      calculate_category_total "$OPTARG"
      ;;
    n)
      calculate_name_total "$OPTARG"
      ;;
    s)
      sort_csv "$OPTARG"
      ;;
    h)
      show_help
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      exit 1
      ;;
  esac
done

# Shift past all the flags
shift $((OPTIND -1))

# Insert the new record into main.csv
insert_record "$1" "$2" "$3" "$4"

# Sort the csv by date (default)
sort_csv "1"





awk -F, '{split($1,a,"-"); print a[3]a[2]a[1], $0}' main.csv | sort | cut -d " " -f 2-
